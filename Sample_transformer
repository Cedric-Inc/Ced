import torch
import torch.nn as nn
import torch.optim as optim
import torch.utils.data as data
import math
import copy


class MultiHeadAttention(nn.Module):
    def __init__(self, d_model, num_heads): # TOCOMMENT d_model = number of Embedding Dimensions, num_heads = number of Attention Heads
        super(MultiHeadAttention, self).__init__()
        assert d_model % num_heads == 0
        
        self.d_model = d_model
        self.num_heads = num_heads
        self.d_k = d_model // num_heads
        
        self.W_q = nn.Linear(d_model, d_model) # TOCOMMENT W_q is Querry projection matrix that transfarms input to Querry
        self.W_k = nn.Linear(d_model, d_model) # TOCOMMENT W_k is Key projection matrix that transfarms input to Key
        self.W_v = nn.Linear(d_model, d_model) # TOCOMMENT W_v is Value projection matrix that transfarms input to Value
        self.W_o = nn.Linear(d_model, d_model) # TOCOMMENT W_o is Output projection matrix that transfarms input to Output 
        
    def scaled_dot_product_attention(self, Q, K, V, mask=None):
        attn_scores = torch.matmul(Q, K.transpose(-2, -1)) / math.sqrt(self.d_k)  # TOCOMMENT Attention scores, 对应注意力方程 α，见上图
        if mask is not None:
            attn_scores = attn_scores.masked_fill(mask == 0, -1e9)
        attn_probs = torch.softmax(attn_scores, dim=-1)
        output = torch.matmul(attn_probs, V) # TOCOMMENT 加权计算输出的值
        return output
        
    def split_heads(self, x):
        batch_size, seq_length, d_model = x.size()
        return x.view(batch_size, seq_length, self.num_heads, self.d_k).transpose(1, 2)
        
    def combine_heads(self, x): # TODO 
        batch_size, _, seq_length, d_k = x.size()
        return x.transpose(1, 2).contiguous().view(batch_size, seq_length, self.d_model) #TOCOMMENT 将多头得到的特征重新组合为一个完整的特征维度
        
    def forward(self, Q, K, V, mask=None):
        Q = self.split_heads(self.W_q(Q))
        K = self.split_heads(self.W_k(K))
        V = self.split_heads(self.W_v(V))
        
        attn_output = self.scaled_dot_product_attention(Q, K, V, mask)
        output = self.W_o(self.combine_heads(attn_output))
        return output
    

# 这里的过程是 fullyConnect -> relu -> fullyConnect  
class PositionWiseFeedForward(nn.Module):
    def __init__(self, d_model, d_ff):
        super(PositionWiseFeedForward, self).__init__()
        self.fc1 = nn.Linear(d_model, d_ff)
        self.fc2 = nn.Linear(d_ff, d_model)
        self.relu = nn.ReLU() 

    def forward(self, x):
        return self.fc2(self.relu(self.fc1(x))) 
    

class PositionalEncoding(nn.Module):
    def __init__(self, d_model, max_seq_length):
        super(PositionalEncoding, self).__init__()
        
        pe = torch.zeros(max_seq_length, d_model)
        position = torch.arange(0, max_seq_length, dtype=torch.float).unsqueeze(1) # TOCOMMENT: What are the values in position， 创建位置向量 0，1，2...,，是一个和输入序列等长的range，经过unsqueeze(1) 之后，新的张量形状会变成 [max_seq_length, 1]
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * -(math.log(10000.0) / d_model))
        
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        
        self.register_buffer('pe', pe.unsqueeze(0))
        
    def forward(self, x):
        return x + self.pe[:, :x.size(1)] # TOCOMMENT: What does "+" indicate ，给对应位置加上位置向量
    

class EncoderLayer(nn.Module):
    def __init__(self, d_model, num_heads, d_ff, dropout):
        super(EncoderLayer, self).__init__()
        self.self_attn = MultiHeadAttention(d_model, num_heads)
        self.feed_forward = PositionWiseFeedForward(d_model, d_ff)
        self.norm1 = nn.LayerNorm(d_model)
        self.norm2 = nn.LayerNorm(d_model)
        self.dropout = nn.Dropout(dropout)
        
    def forward(self, x, mask):
        # TODO: Use the pseudocode of Transformer to code the forward pass
        # Estimated lines of code: 4
        # Step 1: Multi-Head Self-Attention
        attn_output = self.self_attn(x, x, x, mask)  # Multi-Head Attention
        attn_output = self.dropout(attn_output)      # Apply dropout    
        x = self.norm1(x + attn_output)              # Residual connection + LayerNorm
    
        # Step 2: Feed-Forward Network
        ffn_output = self.feed_forward(x)            # Feed-Forward Network
        ffn_output = self.dropout(ffn_output)        # Apply dropout
        x = self.norm2(x + ffn_output)               # Residual connection + LayerNorm
        return x
    

class DecoderLayer(nn.Module):
    def __init__(self, d_model, num_heads, d_ff, dropout):
        super(DecoderLayer, self).__init__()
        # TODO: Pick the appropriate layers. You may use the constructor in encoder as reference.
        # Estimated lines of code: 4
        self.self_attn = MultiHeadAttention(d_model, num_heads)
        self.cross_attn = MultiHeadAttention(d_model, num_heads)  # attention to encoder output
        self.feed_forward = PositionWiseFeedForward(d_model, d_ff)
        
        self.norm1 = nn.LayerNorm(d_model)
        self.norm2 = nn.LayerNorm(d_model)
        self.norm3 = nn.LayerNorm(d_model)
        self.dropout = nn.Dropout(dropout)
        
    def forward(self, x, enc_output, src_mask, tgt_mask):
        # TODO: Use the pseudocode of Transformer to code the forward pass
        # Estimated lines of code: 4
        attn_output = self.self_attn(x, x, x, tgt_mask)  # Self-attention on decoder
        x = self.norm1(x + self.dropout(attn_output))
        
        attn_output = self.cross_attn(x, enc_output, enc_output, src_mask)  # Attention to encoder output
        x = self.norm2(x + self.dropout(attn_output))
        
        ff_output = self.feed_forward(x)  # Feedforward Network
        x = self.norm3(x + self.dropout(ff_output))
        return x
    

class Transformer(nn.Module):
    def __init__(self, src_vocab_size, tgt_vocab_size, d_model, num_heads, num_layers, d_ff, max_seq_length, dropout):
        super(Transformer, self).__init__()
        self.encoder_embedding = nn.Embedding(src_vocab_size, d_model)
        self.decoder_embedding = nn.Embedding(tgt_vocab_size, d_model)
        self.positional_encoding = PositionalEncoding(d_model, max_seq_length)

        # self.encoder_layer = nn.ModuleList([EncoderLayer(d_model, num_heads, d_ff, dropout)]) # TODO: Modify this to add stacks of encoders
        # self.decoder_layer = nn.ModuleList([DecoderLayer(d_model, num_heads, d_ff, dropout)]) # TODO: Modify this to add stacks of decoders

        self.encoder_layer = nn.ModuleList([EncoderLayer(d_model, num_heads, d_ff, dropout) for _ in range(num_layers)])
        self.decoder_layer = nn.ModuleList([DecoderLayer(d_model, num_heads, d_ff, dropout) for _ in range(num_layers)])
        
        self.fc = nn.Linear(d_model, tgt_vocab_size)
        self.dropout = nn.Dropout(dropout)

    def generate_mask(self, src, tgt):
        src_mask = (src != 0).unsqueeze(1).unsqueeze(2)
        tgt_mask = (tgt != 0).unsqueeze(1).unsqueeze(3)
        seq_length = tgt.size(1)
        nopeak_mask = (1 - torch.triu(torch.ones(1, seq_length, seq_length), diagonal=1)).bool()
        tgt_mask = tgt_mask & nopeak_mask
        return src_mask, tgt_mask

    def forward(self, src, tgt):
        src_mask, tgt_mask = self.generate_mask(src, tgt)
        src_embedded = self.dropout(self.positional_encoding(self.encoder_embedding(src)))
        tgt_embedded = self.dropout(self.positional_encoding(self.decoder_embedding(tgt)))

        enc_output = src_embedded
        #TODO: For a stack of encoders, call the required components. Hint: Encoders are sequentially applied.
        # Estimated lines of code: 4

        for layer in self.encoder_layer:
            enc_output = layer(enc_output, src_mask)
        
        dec_output = tgt_embedded
        #TODO: For a stack of decoders, call the required components. Hint: Decoders are sequentially applied
        # Estimated lines of code: 4

        for layer in self.decoder_layer:
            dec_output = layer(dec_output, enc_output, src_mask, tgt_mask)
        
        output = self.fc(dec_output)
        return output
    

#############################
#                           #
#        Test Code          #
#                           #
#############################

src_vocab_size = 5000
tgt_vocab_size = 5000
d_model = 512
num_heads = 8
num_layers = 6
d_ff = 2048
max_seq_length = 100
dropout = 0.1

transformer = Transformer(src_vocab_size, tgt_vocab_size, d_model, num_heads, num_layers, d_ff, max_seq_length, dropout)

# Generate random sample data
src_data = torch.randint(1, src_vocab_size, (64, max_seq_length))  # (batch_size, seq_length)
tgt_data = torch.randint(1, tgt_vocab_size, (64, max_seq_length))  # (batch_size, seq_length)

print(src_data)

loss_fn = nn.CrossEntropyLoss(ignore_index=0)
optimizer = optim.Adam(transformer.parameters(), lr=0.0001, betas=(0.9, 0.98), eps=1e-9)

transformer.train()

for epoch in range(3):
    optimizer.zero_grad()
    output = transformer(src_data, tgt_data[:, :-1])
    loss = loss_fn(output.contiguous().view(-1, tgt_vocab_size), tgt_data[:, 1:].contiguous().view(-1))
    loss.backward()
    optimizer.step()
    print(f"Epoch: {epoch+1}, Loss: {loss.item()}")